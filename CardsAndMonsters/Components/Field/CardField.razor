@inject IBattleService _battleService

@if (_battleService.DeclaringAttack && !Board.OpponentField.Monsters.Any())
{
    <button class="btn btn-primary" @onclick="() => AttackTarget(new() { Target = BattleTarget.Direct})">ATTACK OPPONENT</button>
}
<div id="gameboard">
    <div class="card-row">
        <DeckPreview DeckCount="Board.Opponent.Deck.Count" />

        @for (int i = 0; i < AppConstants.FieldSize; i++)
        {
            <Card />
        }

        <Graveyard CardCount="Board.OpponentField.Graveyard.Count" />
    </div>
    <div class="card-row">
        <Card />

        @for (int i = 0; i < Board.OpponentField.Monsters.Count; i++)
        {
            <MonsterCard Monster="Board.OpponentField.Monsters[i]" DeclaringAttack="_battleService.DeclaringAttack"
                         OnAttackDeclared="_battleService.DeclareAttack" OnMonsterAttack="AttackTarget" OnPositionSwitch="SwitchPosition" />
        }
        @for (int i = 0; i < AppConstants.FieldSize - Board.OpponentField.Monsters.Count; i++)
        {
            <Card />
        }

        <Card />
    </div>

    <div class="card-row">
        <Card />

        @for (int i = 0; i < Board.PlayerField.Monsters.Count; i++)
        {
            <MonsterCard Monster="Board.PlayerField.Monsters[i]" DeclaringAttack="_battleService.DeclaringAttack"
                         OnAttackDeclared="_battleService.DeclareAttack" OnMonsterAttack="AttackTarget" OnPositionSwitch="SwitchPosition" />
        }
        @for (int i = 0; i < AppConstants.FieldSize - Board.PlayerField.Monsters.Count; i++)
        {
            <Card />
        }

        <Card />
    </div>
    <div class="card-row">
        <Graveyard CardCount="Board.PlayerField.Graveyard.Count" />

        @for (int i = 0; i < AppConstants.FieldSize; i++)
        {
            <Card />
        }

        <DeckPreview DeckCount="Board.Player.Deck.Count" />
    </div>
</div>

@code {
    [CascadingParameter]
    public Board Board { get; set; }

    [Parameter]
    public EventCallback<BattleInfo> OnPlayerAttack { get; set; }

    [Parameter]
    public EventCallback<Monster> OnPositionSwitch { get; set; }

    private async Task SwitchPosition(Monster monster)
    {
        await OnPositionSwitch.InvokeAsync(monster);
    }

    private async Task AttackTarget(BattleInfo battleInfo)
    {
        _battleService.AttackTarget(battleInfo);
        await OnPlayerAttack.InvokeAsync(_battleService.CurrentBattle);
        _battleService.ClearCurrentBattle();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Board):
                    Board = (Board)parameter.Value;
                    break;
                case nameof(OnPlayerAttack):
                    OnPlayerAttack = (EventCallback<BattleInfo>)parameter.Value;
                    break;
                case nameof(OnPositionSwitch):
                    OnPositionSwitch = (EventCallback<Monster>)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }
}

<style>
    .card-row {
        display: flex;
        justify-content: space-evenly;
    }
    
</style>