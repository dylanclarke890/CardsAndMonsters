@if (DisplayOptions)
{
        if (CardPendingPlacement.GetType() == typeof(Monster))
        {
            var monster = CardPendingPlacement as Monster;
            <p>Type: Monster</p>
            <p>Attack: @monster.Attack</p>
            <p>Defense: @monster.Defense</p>
            <button class="btn btn-primary" @onclick="() => SelectionPicked(FieldPosition.VerticalUp)">ATTACK MODE</button>
            <button class="btn btn-primary" @onclick="() => SelectionPicked(FieldPosition.HorizontalDown)">SET</button>
        }
}

@code {
    [Parameter]
    public bool DisplayOptions { get; set; }

    [Parameter]
    public BaseCard CardPendingPlacement { get; set; }

    [Parameter]
    public EventCallback<FieldPosition> OnPositionPicked { get; set; }

    private async Task SelectionPicked(FieldPosition position)
    {
        await OnPositionPicked.InvokeAsync(position);
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(DisplayOptions):
                    DisplayOptions = (bool)parameter.Value;
                    break;
                case nameof(CardPendingPlacement):
                    CardPendingPlacement = (BaseCard)parameter.Value;
                    break;
                case nameof(OnPositionPicked):
                    OnPositionPicked = (EventCallback<FieldPosition>)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }
}
