
    <div class="player-display">
        
            <div class="player-hp">
                <p class="text-left">You - @Board.Player.HP</p>
            </div>
            <div class="player-hand">
                <PlayerHand Cards="Board.Player.CurrentHand" CardPlayed="PlayCard" />
            </div>
    </div>

<SelectCardPosition CardPendingPlacement="PendingPlacement" DisplayOptions="DisplayFieldOptions" OnPositionPicked="PlayMonster" />

@code {
    [CascadingParameter]
    public Board Board { get; set; }

    [Parameter]
    public bool DisplayFieldOptions { get; set; }

    [Parameter]
    public BaseCard PendingPlacement { get; set; }

    [Parameter]
    public EventCallback<FieldPosition> OnPositionPicked { get; set; }

    [Parameter]
    public EventCallback<BaseCard> CardPlayed { get; set; }

    private async Task PlayCard(BaseCard card)
    {
        await CardPlayed.InvokeAsync(card);
    }

    private async Task PlayMonster(FieldPosition fieldPosition)
    {
        await OnPositionPicked.InvokeAsync(fieldPosition);
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Board):
                    Board = (Board)parameter.Value;
                    break;
                case nameof(DisplayFieldOptions):
                    DisplayFieldOptions = (bool)parameter.Value;
                    break;
                case nameof(PendingPlacement):
                    PendingPlacement = (BaseCard)parameter.Value;
                    break;
                case nameof(OnPositionPicked):
                    OnPositionPicked = (EventCallback<FieldPosition>)parameter.Value;
                    break;
                case nameof(CardPlayed):
                    CardPlayed = (EventCallback<BaseCard>)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }
}


