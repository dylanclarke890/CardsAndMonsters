@page "/play"
@layout GameLayout
@inject IGameService _gameService
@inject ICardService _cardService
@inject IGameOverService _gameOverService
@implements IDisposable



@if (HasGame)
{
    <div class="restart-screen">
        <div>
            <h3>You have a game left.</h3>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="Resume">
                Resume?
            </button>
            <button class="btn btn-primary" @onclick="Restart">
                Restart?
            </button>
        </div>
    </div>
}
<div id="game-shell">
    @if (_gameService.Board != null)
    {
        if (!_gameOverService.GameOver && !HasGame)
        {
            <OpponentView Opponent="_gameService.Board.Opponent" />

            <div class="board-shell">
                <div class="board-wrapper">
                    <div class="player-sideboard">
                        <TurnInfoDisplay Board="_gameService.Board" />
                    </div>

                    <div>
                        <CascadingValue Value="_gameService.Board" TValue="Board">
                            <CardField OnPlayerAttack="_gameService.Attack" OnPositionSwitch="_gameService.SwitchPosition" />
                        </CascadingValue>
                    </div>
                </div>
            </div>
            <CascadingValue Value="_gameService.Board" TValue="Board">
                <PlayerView PendingPlacement="_cardService.PendingPlacement" CardPlayed="_gameService.PlayCard" DisplayFieldOptions="_cardService.ChoosingFieldPosition"
                            OnPositionPicked="_gameService.PlayMonster" />
            </CascadingValue>
        }

        <GameOver Player="_gameService.Board.Player" />
    }
</div>

@code {
    private bool HasGame;

    protected override void OnInitialized()
    {
        _gameService.OnAction += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await _gameService.CheckForExistingGame())
            {
                HasGame = true;
                StateHasChanged();
            }
            else
            {
                await _gameService.StartGame();
            }
            firstRender = false;
        }
    }

    private async Task Resume()
    {
        HasGame = false;
        await _gameService.ResumeGame();
        StateHasChanged();
    }

    private async Task Restart()
    {
        HasGame = false;
        await _gameService.ClearGame();

        await _gameService.StartGame();
        StateHasChanged();
    }

    public void Dispose()
    {
        _gameService.OnAction -= StateHasChanged;
    }
}

<style>
    .deck-card-img {
        width: 100%;
        height: 7.5em;
        border-radius: 10px;
        border: 1px solid #aaa;
    }
    .restart-screen {
        
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100%;
        justify-content: center;
        align-items: center;
    }

    body {
        color: rgba(255,255,255,1);
        background-color: black;
        background-image: url("images/pbg2.png");
        background-position: bottom left;
    }

    #game-shell {
        display: flex;
        flex-direction: column;
        height: 100vh;
        justify-content: space-between;
    }

    .board-shell {
        height: 100%;
    }

    .board-wrapper {
        display: flex;
        height: 100%;
    }

    .info-panel {
        display: flex;
        flex-direction: column;
        height: 100%;
        align-items: center;
        justify-content: center;
        font-family: 'Bangers', cursive;
        font-size:2em;
    }
    .button-size{
        font-size:0.9em !important;
    }
    #gameboard {
        margin: 0 auto;
        width: 50vw;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        background-color: black;
        border-radius: 30px;
        background-image: url("images/gameboard.png");
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        box-shadow: 0px 0px 14px 15px rgba(255,255,255,0.2);
    }

    .player-sideboard {
        width: 25%;
    }

    .opponent-display {
        display: flex;
        justify-content: flex-start;
    }

    .opponent-hand {
        width: 75%;
        display: flex;
        justify-content: flex-end;
    }

    .opponent-hp {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 25%;
        font-family: 'Bangers', cursive;
        font-size:2.5em;
    }

    .player-display {
        display: flex;
        justify-content: flex-end;
    }

    .player-hand {
        width: 75%;
        display: flex;
        justify-content: flex-start;
    }

    .player-hp {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 25%;
        font-family: 'Bangers', cursive;
        font-size: 2.5em;
    }

    .spell-row, .monster-row {
        display: flex;
        justify-content: space-between;
    }
</style>