@page "/play"
@layout GameLayout
@inject IGameService _gameService
@inject ICardService _cardService
@inject IGameOverService _gameOverService
@implements IDisposable



@if (HasGame)
{
    <div class="restart-screen">
        <div>
            <h3>You have a game left.</h3>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="Resume">
                Resume?
            </button>
            <button class="btn btn-primary" @onclick="Restart">
                Restart?
            </button>
        </div>
    </div>
}
<div id="game-shell">
    @if (_gameService.Board != null)
    {
        if (!_gameOverService.GameOver && !HasGame)
        {
            <OpponentView Opponent="_gameService.Board.Opponent" />

            <div class="board-shell">
                <div class="board-wrapper">
                    <div class="player-sideboard">
                        <TurnInfoDisplay Board="_gameService.Board" />
                    </div>

                    <div>
                        <CascadingValue Value="_gameService.Board" TValue="Board">
                            <CardField OnPlayerAttack="_gameService.Attack" OnPositionSwitch="_gameService.SwitchPosition" />
                        </CascadingValue>
                    </div>
                </div>
            </div>
            <CascadingValue Value="_gameService.Board" TValue="Board">
                <PlayerView PendingPlacement="_cardService.PendingPlacement" CardPlayed="_gameService.PlayCard" DisplayFieldOptions="_cardService.ChoosingFieldPosition"
                            OnPositionPicked="_gameService.PlayMonster" />
            </CascadingValue>
        }

        <GameOver Player="_gameService.Board.Player" />
    }
</div>

@code {
    private bool HasGame;

    protected override void OnInitialized()
    {
        _gameService.OnAction += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await _gameService.CheckForExistingGame())
            {
                HasGame = true;
                StateHasChanged();
            }
            else
            {
                await _gameService.NewGame();
            }
            firstRender = false;
        }
    }

    private async Task Resume()
    {
        HasGame = false;
        await _gameService.ResumeGame();
        StateHasChanged();
    }

    private async Task Restart()
    {
        HasGame = false;
        await _gameService.ClearGame();

        await _gameService.NewGame();
        StateHasChanged();
    }

    public void Dispose()
    {
        _gameService.OnAction -= StateHasChanged;
    }
}

<style>
    body {
        color: rgba(255,255,255,1);
        background-color: black;
        background-image: url("images/pbg2.png");
        background-position: bottom left;
    }
</style>