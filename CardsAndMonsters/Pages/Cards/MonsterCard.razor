@if (Monster != null)
{
<div class="deck-card monster-card @(Playable() ? "playable" : null)"
     @onclick="AbleToPlayMonster() ? () => Play() : AbleToSwitch() ? () => SwitchPosition() : AbleToBattle() ? () => DeclareAttack() : AbleToAttack() ? () => Attack() : null">
    @switch (Monster.FieldPosition)
    {
        case FieldPosition.VerticalUp:
            <h5>Monster</h5>
            <span>@Monster.Attack | @Monster.Defense</span>
            break;
        case FieldPosition.HorizontalDown:
            <img class="card-img-top horizontal" src="/images/card-cover.jpg">
            break;
        case FieldPosition.HorizontalUp:
            <h5>Monster</h5>
            <span>@Monster.Attack | @Monster.Defense</span>
            <span>@FieldPositionConverter.MonsterPositionToString(Monster.FieldPosition)</span>
            break;
        default:
            break;
    }
</div>
}

@code {
    [CascadingParameter]
    public Board Board { get; set; }

    [Parameter]
    public Monster Monster { get; set; }

    [Parameter]
    public EventCallback<BattleInfo> OnMonsterAttack { get; set; }

    [Parameter]
    public EventCallback<BattleInfo> OnAttackDeclared { get; set; }

    [Parameter]
    public EventCallback<Monster> OnPositionSwitch { get; set; }

    [Parameter]
    public EventCallback<Monster> OnMonsterPlayed { get; set; }

    [Parameter]
    public bool DeclaringAttack { get; set; }

    private async Task DeclareAttack()
    {
        var isPlayer = Board.CurrentTurn.Player.Equals(Board.Player);
        BattleInfo battleInfo = new()
        {
            Board = Board,
            AttackingMonster = Monster,
            AttackingPlayer = isPlayer ? Board.Player : Board.Opponent,
            DefendingPlayer = isPlayer ? Board.Opponent : Board.Player
        };

        await OnAttackDeclared.InvokeAsync(battleInfo);
    }

    private async Task Attack()
    {
        BattleInfo battleInfo = new()
        {
            Target = BattleTarget.Monster,
            TargetMonster = Monster,
        };

        await OnMonsterAttack.InvokeAsync(battleInfo);
    }

    private async Task SwitchPosition()
    {
        await OnPositionSwitch.InvokeAsync(Monster);
    }

    private async Task Play()
    {
        await OnMonsterPlayed.InvokeAsync(Monster);
    }

    private bool AbleToSwitch()
    {
        return (Board?.CurrentTurn?.AbleToSwitch(Monster.Id, Board?.Player)).GetValueOrDefault();
    }

    private bool AbleToBattle()
    {
        return (Board?.CurrentTurn?.AbleToBattle(Monster.Id, Board?.Player, DeclaringAttack)).GetValueOrDefault();
    }

    private bool AbleToAttack()
    {
        return (Board?.CurrentTurn?.AbleToAttack(Monster.Id, Board?.Player, DeclaringAttack)).GetValueOrDefault();
    }

    private bool AbleToPlayMonster()
    {
        return (Board?.AbleToPlayMonster(Monster)).GetValueOrDefault();
    }

    private bool Playable()
    {
        return AbleToSwitch() || AbleToBattle() || AbleToAttack() || AbleToPlayMonster();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Board):
                    Board = (Board)parameter.Value;
                    break;
                case nameof(Monster):
                    Monster = (Monster)parameter.Value;
                    break;
                case nameof(OnAttackDeclared):
                    OnAttackDeclared = (EventCallback<BattleInfo>)parameter.Value;
                    break;
                case nameof(OnMonsterAttack):
                    OnMonsterAttack = (EventCallback<BattleInfo>)parameter.Value;
                    break;
                case nameof(OnPositionSwitch):
                    OnPositionSwitch = (EventCallback<Monster>)parameter.Value;
                    break;
                case nameof(OnMonsterPlayed):
                    OnMonsterPlayed = (EventCallback<Monster>)parameter.Value;
                    break;
                case nameof(DeclaringAttack):
                    DeclaringAttack = (bool)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }
}
