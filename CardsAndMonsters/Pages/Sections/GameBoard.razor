@if (DeclaringAttack && !Board.OpponentMonsters.Any())
{
    <button class="btn btn-primary" @onclick="() => Attack(BattleTarget.Direct)">ATTACK OPPONENT</button>
}
<div class="board">
    <div class="opponent-cards">
        <div class="spell-row">
            @for (int i = 0; i < 5; i++)
            {
                <div class="card">
                    <p class="p-3">&nbsp;</p>
                </div>
            }
        </div>
        <div class="monster-row">
            @foreach (var card in Board.OpponentMonsters)
            {
                <div class="card">
                    <p class="p-3">
                        @switch (card.FieldPosition)
                        {
                            case FieldPosition.VerticalUp:
                                <h5>Monster</h5>
                                <span>A: @card.Attack</span>
                                break;
                            case FieldPosition.HorizontalDown:
                                <h5>Monster</h5>
                                <span>HIDDEN</span>
                                break;
                            case FieldPosition.HorizontalUp:
                                <h5>Monster</h5>
                                <span>D: @card.Defense</span>
                                break;
                            default:
                                break;
                        }
                        @if (DeclaringAttack)
                        {
                            <button class="btn btn-primary" @onclick="() => Attack(BattleTarget.Monster, card)">ATTACK MONSTER</button>
                        }
                    </p>
                </div>
            }
            @for (int i = 0; i < 5 - Board.OpponentMonsters.Count; i++)
            {
                <div class="card">
                    <p class="p-3">&nbsp;</p>
                </div>
            }
        </div>
    </div>
    <div class="player-cards">
        <div class="monster-row">
            @foreach (var card in Board.PlayerMonsters)
            {
                <div class="card">
                    <div class="p-3">
                        @switch (card.FieldPosition)
                        {
                            case FieldPosition.VerticalUp:
                                <h5>Monster</h5>
                                <span>A: @card.Attack</span>
                                @if (AbleToBattle(card.Id))
                                {
                                    <button @onclick="() => DeclareAttack(card)" class="btn btn-primary">ATTACK</button>
                                }
                                break;
                            case FieldPosition.HorizontalDown:
                                <h5>Monster</h5>
                                <p>A: @card.Attack || D: @card.Defense</p>
                                <span>HIDDEN</span>
                                break;
                            case FieldPosition.HorizontalUp:
                                <h5>Monster</h5>
                                <span>D: @card.Defense</span>
                                break;
                            default:
                                break;
                        }
                        @if (AbleToSwitch(card.Id))
                        {
                            <button @onclick="() => SwitchPosition(card)">SWITCH POSITION</button>
                        }
                    </div>
                </div>
            }
            @for (int i = 0; i < 5 - Board.PlayerMonsters.Count; i++)
            {
                <div class="card">
                    <p class="p-3">&nbsp;</p>
                </div>
            }
        </div>
        <div class="spell-row">
            @for (int i = 0; i < 5; i++)
            {
                <div class="card">
                    <p class="p-3">&nbsp;</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Board Board { get; set; }

    [Parameter]
    public TurnState CurrentTurn { get; set; }

    [Parameter]
    public IDictionary<int, TurnState> Turns { get; set; }

    [Parameter]
    public EventCallback<BattleInfo> OnPlayerAttack { get; set; }

    [Parameter]
    public EventCallback<Monster> OnPositionSwitch { get; set; }

    private bool DeclaringAttack;
    private BattleInfo BattleInfo;

    private void DeclareAttack(Monster attackingMonster)
    {
        DeclaringAttack = true;
        var isPlayer = CurrentTurn.Player.Equals(Board.Player);
        BattleInfo = new()
        {
            AttackingMonster = attackingMonster,
            AttackingPlayer = isPlayer ? Board.Player : Board.Opponent,
            DefendingPlayer = isPlayer ? Board.Opponent : Board.Player
        };
    }

    private async Task Attack(BattleTarget target, Monster monster = null)
    {
        BattleInfo.Target = target;
        BattleInfo.TargetMonster = monster;

        await OnPlayerAttack.InvokeAsync(BattleInfo);
        DeclaringAttack = false;
        BattleInfo = null;
    }

    private bool AbleToSwitch(Guid cardId)
    {
        return CurrentTurn.Phase is Phase.Main && CurrentTurn.MonsterState.TryGetValue(cardId, out var result)
            && result.AbleToSwitch && CurrentTurn.Player.Equals(Board.Player);
    }

    private bool AbleToBattle(Guid cardId)
    {
        return CurrentTurn.Phase is Phase.Battle && CurrentTurn.MonsterState.TryGetValue(cardId, out var result)
            && result.TimesAttacked < result.Monster.AttacksPerTurn && CurrentTurn.Player.Equals(Board.Player)
            && !DeclaringAttack;
    }

    private async Task SwitchPosition(Monster monster)
    {
        switch (monster.FieldPosition)
        {
            case FieldPosition.HorizontalUp:
                monster.FieldPosition = FieldPosition.VerticalUp;
                break;
            case FieldPosition.HorizontalDown:
                monster.FieldPosition = FieldPosition.VerticalUp;
                break;
            case FieldPosition.VerticalUp:
                monster.FieldPosition = FieldPosition.HorizontalUp;
                break;
            default:
                throw new InvalidOperationException("Expected a valid position");
        }

        await OnPositionSwitch.InvokeAsync(monster);
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Board):
                    Board = (Board)parameter.Value;
                    break;
                case nameof(CurrentTurn):
                    CurrentTurn = (TurnState)parameter.Value;
                    break;
                case nameof(Turns):
                    Turns = (IDictionary<int, TurnState>)parameter.Value;
                    break;
                case nameof(OnPlayerAttack):
                    OnPlayerAttack = (EventCallback<BattleInfo>)parameter.Value;
                    break;
                case nameof(OnPositionSwitch):
                    OnPositionSwitch = (EventCallback<Monster>)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }
}
