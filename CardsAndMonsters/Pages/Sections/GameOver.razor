@inject GameOverService _gameOverService
@implements IDisposable

@if (GameOverInfo != null)
{
    <h1 class="text-center">@(GameOverInfo.LosingPlayer.Equals(Player) ? "Opponent wins" : "You win!")</h1>
    <h2 class="text-center">@(GameOverInfo.LosingPlayer.Equals(Player) ? "You" : "Opponent") lost due to @GameOverInfo.LossReason</h2>
}
@code {
    [Parameter]
    public Duelist Player { get; set; }

    private GameOverInfo GameOverInfo;

    protected override void OnInitialized()
    {
        _gameOverService.OnLoss += (lossInfo) => GameOverInfo = lossInfo;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Player):
                    Player = (Duelist)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }

    public void Dispose()
    {
        _gameOverService.OnLoss -= (lossInfo) => GameOverInfo = lossInfo;
    }
}
