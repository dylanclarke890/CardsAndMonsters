@page "/play"
@layout EmptyLayout

@if (!GameEnded)
{
<div class="container-fluid">
    <div class="opponent-display">
        <div class="row">
            <div class="col-10">
                <PlayerHand Cards="Opponent.CurrentHand" HideInfo />
            </div>
            <div class="col-2">
                <h3 class="text-right">Opponent - @Opponent.HP</h3>
                <DeckPreview DeckCount="Opponent.Deck.Count" />
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-2">
            <h3 class="text-left">Turn: @(TurnCount + 1) (@CurrentTurn.Phase)</h3>
            @if (CurrentTurn.IsCurrentPlayer(Player))
            {
                @if (CurrentTurn.Phase < Phase.Battle)
                {
                    <button class="btn" @onclick="() => EnterPhase(Phase.Battle)">BATTLE</button>
                }
                <button class="btn" @onclick="EndTurn">END TURN</button>
            }
            else
            {
                <button class="btn" @onclick="EndTurn">END OPPONENTS TURN</button>
            }
        </div>
        <div class="col-9">
            <GameBoard CurrentTurn="CurrentTurn" Turns="Turns" Board="Board" OnPlayerAttack="DirectAttack" OnPositionSwitch="PositionSwitched"/>
        </div>
        <div class="col-1">
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="player-display">
        <div class="row">
            <div class="col-2">
                <h3 class="text-left">You - @Player.HP</h3>
                <DeckPreview DeckCount="Player.Deck.Count" />
            </div>
            <div class="col-10">
                <PlayerHand Cards="Player.CurrentHand" CanPlay="CanPlay()" CardPlayed="PlayCard" Phase="CurrentTurn.Phase"/>
            </div>
        </div>
    </div>
</div>
<SelectCardPosition CardPendingPlacement="PendingPlacement" DisplayOptions="ChoosingFieldPosition" OnPositionPicked="PlayMonster"/>
}
else
{
    <h3 class="text-center">Game Over</h3>
}

@code {
    private Player Player;
    private Player Opponent;

    private Board Board;
    private IDictionary<int, TurnState> Turns;
    private TurnState CurrentTurn;

    private Player StartingPlayer;
    private bool ChoosingFieldPosition;
    private bool GameEnded;

    protected override async Task OnInitializedAsync()
    {
        Turns = new Dictionary<int, TurnState>();

        Player = PlayerBuilder.GetNewPlayer();
        Opponent = PlayerBuilder.GetNewOpponent();
        Board = new(Player, Opponent);

        Random rnd = new();
        StartingPlayer = rnd.Next(2) == 1 ? Opponent : Player;
        CurrentTurn = new(StartingPlayer);

        EnterPhase(Phase.Standby);
        StateHasChanged();

        for (int i = 0; i < 5; i++)
        {
            Opponent.DrawCard();
            Player.DrawCard();
            StateHasChanged();
            await Task.Delay(300);
        }

        EnterPhase(Phase.Main);
    }

    private int TurnCount = 0;

    private bool CanPlay()
    {
        return CurrentTurn.IsCurrentPlayer(Player) && (CurrentTurn.Phase is Phase.Main && !ChoosingFieldPosition || (CurrentTurn.Phase is Phase.Battle && TurnCount > 0));
    }

    private void StartTurn(Player player)
    {
        CurrentTurn.Player = player;
        var success = player.DrawCard();

        if (!success)
        {
            EndGame();
        }

        EnterPhase(Phase.Main);
    }

    private void EnterPhase(Phase phase)
    {
        CurrentTurn.Phase = phase;
    }

    private void EndTurn()
    {
        EnterPhase(Phase.End);
        Turns[TurnCount] = CurrentTurn;
        CurrentTurn = new(CurrentTurn.MonstersInPlay);
        TurnCount++;
        EnterPhase(Phase.Standby);
        StartTurn(Turns.Last().Value.Player.Equals(Player) ? Opponent : Player);
    }

    private void PlayCard(BaseCard card)
    {
        if (card.GetType() == typeof(Monster))
        {
            var monster = card as Monster;
            if (CurrentTurn.IsCurrentPlayer(Player))
            {
                if (Board.PlayerMonsters.Count == 5 || CurrentTurn.NormalSummonLimitReached())
                {
                    return;
                }

                PlayMonster(monster);
            }
        }
    }

    private BaseCard PendingPlacement;
    private void PlayMonster(Monster monster)
    {
        ChoosingFieldPosition = true;
        PendingPlacement = monster;
    }

    private void PlayMonster(FieldPosition position)
    {
        ChoosingFieldPosition = false;
        var monster = PendingPlacement as Monster;
        monster.FieldPosition = position;
        Player.PlayMonster(monster, Board, CurrentTurn);
        PendingPlacement = null;
    }

    private void DirectAttack(Monster monster)
    {
        var dmg = monster.Attack;
        DamageOpponent(dmg);
    }

    private void PositionSwitched(Monster monster)
    {
        var currentMonster = Board.PlayerMonsters.FirstOrDefault(m => Monster.Equals(m, monster));
        Board.PlayerMonsters[Board.PlayerMonsters.IndexOf(currentMonster)] = monster;
        CurrentTurn.AbleToSwitch[monster.Id] = false;
    }

    private void DamageOpponent(decimal amount)
    {
        Opponent.TakeDamage(amount);
        CheckForGameOver();
    }

    private void DamagePlayer(decimal amount)
    {
        Player.TakeDamage(amount);
        CheckForGameOver();
    }

    private void CheckForGameOver()
    {
        if (Player.OutOfHealth() || Opponent.OutOfHealth())
        {
            EndGame();
        }
    }

    private void EndGame()
    {
        GameEnded = true;
    }
}

<style>
    .opponent-display {
        margin-bottom: 1em;
    }
    .player-display {
        margin-top: 1em;
    }

    .spell-row, .monster-row {
        display: flex;
        justify-content: space-between;
    }
</style>