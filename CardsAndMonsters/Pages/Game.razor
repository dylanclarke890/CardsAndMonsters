@page "/play"
@layout EmptyLayout

@if (!GameEnded)
{
    <OpponentView Opponent="Board.Opponent" />

    <div class="container-fluid">
        <div class="row">
            <div class="col-1">
                <h3>@(TurnCount + 1)</h3>
                <h3>@Board.CurrentTurn.Phase</h3>
                @if (Board.Player.IsCurrentPlayer(Board.CurrentTurn.Player))
                {
                    @if (Board.CurrentTurn.Phase < Phase.Battle)
                    {
                        <button class="btn btn-outline-primary" @onclick="() => EnterPhase(Phase.Battle)">BATTLE</button>
                    }
                    <button class="btn btn-outline-primary" @onclick="EndTurn">END</button>
                }
            </div>
            <div class="col-10">
                <CascadingValue Value="Board" TValue="Board">
                    <CardField OnPlayerAttack="Attack" OnPositionSwitch="PositionSwitched"/>
                </CascadingValue>
            </div>
        </div>
    </div>
    <CascadingValue Value="Board">
        <PlayerView PendingPlacement="PendingPlacement" CardPlayed="PlayCard" DisplayFieldOptions="ChoosingFieldPosition"
                    DisplayPlayOptions="CanPlayCard()" OnPositionPicked="PlayMonster" />
    </CascadingValue>
}
else
{
    <GameOver LosingPlayer="LosingPlayer" Player="Board.Player" LossReason="Reason" />
}

@code {
    private Board Board;
    private bool ChoosingFieldPosition;
    private bool GameEnded;
    private int TurnCount = 0;
    private BaseCard PendingPlacement;
    private Player LosingPlayer;
    private LossReason Reason;

    protected override async Task OnInitializedAsync()
    {
        Board = new(PlayerBuilder.GetNewPlayer(), PlayerBuilder.GetNewOpponent());

        Random rnd = new();
        var startingPlayer = rnd.Next(2) == 1 ? Board.Opponent : Board.Player;
        Board.CurrentTurn = new(startingPlayer);

        EnterPhase(Phase.Standby);
        StateHasChanged();

        for (int i = 0; i < AppConstants.HandSize; i++)
        {
            Board.Opponent.DrawCard();
            Board.Player.DrawCard();
            StateHasChanged();
            await Task.Delay(300);
        }

        StartTurn(startingPlayer, false);
    }

    private void StartTurn(Player player, bool drawCard)
    {
        bool isPlayer = Board.Player.Equals(player);
        Board.CurrentTurn = new(isPlayer ? Board.PlayerMonsters : Board.OpponentMonsters, player);

        if (drawCard)
        {
            var success = player.DrawCard();
            if (!success)
            {
                EndGame(player, LossReason.DeckOut);
                return;
            }
        }

        EnterPhase(Phase.Main);

        if (!isPlayer)
        {
            FakeOpponentsTurn();
        }
    }

    private void EnterPhase(Phase phase)
    {
        Board.CurrentTurn.Phase = phase;
    }

    private void EndTurn()
    {
        EnterPhase(Phase.End);
        Board.Turns[TurnCount] = Board.CurrentTurn;
        TurnCount++;
        EnterPhase(Phase.Standby);
        StartTurn(Board.Turns.Last().Value.Player.Equals(Board.Player) ? Board.Opponent : Board.Player, true);
    }

    private bool CanPlayCard()
    {
        return Board.Player.Equals(Board.CurrentTurn.Player) && (Board.CurrentTurn.Phase is Phase.Main && !ChoosingFieldPosition || (Board.CurrentTurn.Phase is Phase.Battle && TurnCount > 0));
    }

    private void PlayCard(BaseCard card)
    {
        if (card.IsType(typeof(Monster)))
        {
            var monster = card as Monster;
            if (Board.Player.Equals(Board.CurrentTurn.Player))
            {
                if (Board.PlayerMonsters.Count == AppConstants.FieldSize || Board.CurrentTurn.NormalSummonLimitReached())
                {
                    return;
                }

                PlayMonster(monster);
            }
        }
    }

    private void PlayMonster(Monster monster)
    {
        ChoosingFieldPosition = true;
        PendingPlacement = monster;
    }

    private void PlayMonster(FieldPosition position)
    {
        ChoosingFieldPosition = false;
        var monster = PendingPlacement as Monster;
        monster.FieldPosition = position;
        Board.Player.PlayMonster(monster, Board, Board.CurrentTurn);
        if (TurnCount == 0)
        {
            Board.CurrentTurn.MonsterState[monster.Id].TimesAttacked = monster.AttacksPerTurn;
        }
        PendingPlacement = null;
    }

    private FieldPosition NewPosition(FieldPosition old)
    {
        return old switch
        {
            FieldPosition.HorizontalUp => FieldPosition.VerticalUp,
            FieldPosition.HorizontalDown => FieldPosition.VerticalUp,
            FieldPosition.VerticalUp => FieldPosition.HorizontalUp,
            FieldPosition.VerticalDown => FieldPosition.VerticalUp,
            _ => throw new IndexOutOfRangeException("couldn't work out the new position")
        };
    }

    private void PositionSwitched(Monster monster)
    {
        var currentMonster = Board.PlayerMonsters.FirstOrDefault(m => m.Equals(monster));
        Board.PlayerMonsters[Board.PlayerMonsters.IndexOf(currentMonster)] = monster;
        Board.CurrentTurn.MonsterState[monster.Id].AbleToSwitch = false;
    }

    private void Attack(BattleInfo battleInfo)
    {
        switch (battleInfo.Target)
        {
            case BattleTarget.Direct:
                {
                    if (Board.OpponentMonsters.Any())
                    {
                        throw new InvalidOperationException("Cannot attack directly if opponent has monsters");
                    }
                    else
                    {
                        DirectAttack(battleInfo);
                    }
                    break;
                }
            case BattleTarget.Monster:
                {
                    MonsterAttack(battleInfo);
                    break;
                }
            default:
                break;
        }
    }

    private void MonsterAttack(BattleInfo battleInfo)
    {
        switch (battleInfo.TargetMonster.FieldPosition)
        {
            case FieldPosition.HorizontalUp:
                {
                    battleInfo.TargetMonster.FieldPosition = NewPosition(battleInfo.TargetMonster.FieldPosition);
                    CalculateAtkVsDef(battleInfo);
                }
                break;
            case FieldPosition.HorizontalDown:
                {
                    CalculateAtkVsDef(battleInfo);
                }
                break;
            case FieldPosition.VerticalUp:
                {
                    CalculateAtkVsAtk(battleInfo);
                }
                break;
            default:
                break;
        }
        MonsterAttacked(battleInfo.AttackingMonster.Id);
    }

    private void DirectAttack(BattleInfo battleInfo)
    {
        MonsterAttacked(battleInfo.AttackingMonster.Id);
        DamageDuelist(battleInfo.DefendingPlayer, battleInfo.AttackingMonster.Attack);
    }

    private void CalculateAtkVsAtk(BattleInfo battleInfo)
    {
        if (battleInfo.AttackingMonster.Attack > battleInfo.TargetMonster.Attack)
        {
            DestroyMonster(battleInfo.TargetMonster, battleInfo.DefendingPlayer);
            decimal dmg = battleInfo.AttackingMonster.Attack - battleInfo.TargetMonster.Attack;
            DamageDuelist(battleInfo.DefendingPlayer, dmg);
        }
        else if (battleInfo.AttackingMonster.Attack == battleInfo.TargetMonster.Attack)
        {
            DestroyMonster(battleInfo.AttackingMonster, battleInfo.AttackingPlayer);
            DestroyMonster(battleInfo.TargetMonster, battleInfo.DefendingPlayer);
        }
        else
        {
            DestroyMonster(battleInfo.AttackingMonster, battleInfo.AttackingPlayer);
            decimal dmg = battleInfo.TargetMonster.Attack - battleInfo.AttackingMonster.Attack;
            DamageDuelist(battleInfo.AttackingPlayer, dmg);
        }
    }

    private void CalculateAtkVsDef(BattleInfo battleInfo)
    {
        if (battleInfo.AttackingMonster.Attack > battleInfo.TargetMonster.Defense)
        {
            DestroyMonster(battleInfo.TargetMonster, battleInfo.DefendingPlayer);
        }
        else if (battleInfo.AttackingMonster.Attack < battleInfo.TargetMonster.Defense)
        {
            DestroyMonster(battleInfo.AttackingMonster, battleInfo.AttackingPlayer);
            decimal dmg = battleInfo.TargetMonster.Defense - battleInfo.AttackingMonster.Attack;
            DamageDuelist(battleInfo.AttackingPlayer, dmg);
        }
    }

    private void DestroyMonster(Monster monster, Player player)
    {
        if (Board.Player.Equals(player))
        {
            Board.PlayerMonsters.Remove(monster);
            if (Board.CurrentTurn.Player.Equals(Board.Player))
            {
                MarkAsDestroyed(monster.Id);
            }
        }
        else
        {
            Board.OpponentMonsters.Remove(monster);
            if (Board.CurrentTurn.Player.Equals(Board.Opponent))
            {
                MarkAsDestroyed(monster.Id);
            }
        }
    }

    private void MarkAsDestroyed(Guid monsterId)
    {
        Board.CurrentTurn.MonsterState[monsterId].Destroyed = true;
    }

    private void MonsterAttacked(Guid monsterId)
    {
        Board.CurrentTurn.MonsterState[monsterId].TimesAttacked++;
    }

    private void DamageDuelist(Player player, decimal dmg)
    {
        if (player.Equals(Board.Player))
        {
            DamagePlayer(dmg);
        }
        else
        {
            DamageOpponent(dmg);
        }
    }

    private void DamageOpponent(decimal amount)
    {
        Board.Opponent.TakeDamage(amount);
        CheckForGameOver();
    }

    private void DamagePlayer(decimal amount)
    {
        Board.Player.TakeDamage(amount);
        CheckForGameOver();
    }

    private void CheckForGameOver()
    {
        if (Board.Player.OutOfHealth())
        {
            EndGame(Board.Player, LossReason.NoHP);
        }
        if (Board.Opponent.OutOfHealth())
        {
            EndGame(Board.Opponent, LossReason.NoHP);
        }
    }

    private void EndGame(Player player, LossReason reason)
    {
        Reason = reason;
        LosingPlayer = player;
        GameEnded = true;
    }

    private Player OtherPlayer()
    {
        return Board.CurrentTurn.Player.Equals(Board.Player) ? Board.Opponent : Board.Player;
    }

    private void FakeOpponentsTurn()
    {
        foreach(var monster in Board.OpponentMonsters)
        {
            monster.FieldPosition = NewPosition(monster.FieldPosition);
            Board.CurrentTurn.MonsterState[monster.Id].AbleToSwitch = false;
        }

        Random rnd = new();

        var card = Board.Opponent.CurrentHand[rnd.Next(Board.Opponent.CurrentHand.Count)];
        if (card.IsType(typeof(Monster)) && Board.OpponentMonsters.Count < AppConstants.FieldSize)
        {
            var monster = card as Monster;
            monster.FieldPosition = rnd.Next(2) == 1 ? FieldPosition.VerticalUp : FieldPosition.HorizontalDown;
            Board.Opponent.PlayMonster(monster, Board, Board.CurrentTurn);

            if (TurnCount == 0)
            {
                Board.CurrentTurn.MonsterState[monster.Id].TimesAttacked = monster.AttacksPerTurn;
            }
        }

        EnterPhase(Phase.Battle);

        EndTurn();
    }
}

<style>
    .opponent-display {
        margin-bottom: 1em;
    }
    .player-display {
        margin-top: 1em;
    }

    .spell-row, .monster-row {
        display: flex;
        justify-content: space-between;
    }
</style>