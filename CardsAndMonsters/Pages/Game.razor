@page "/play"
@layout EmptyLayout
@inject IGameService _gameService
@inject IGameOverService _gameOverService
@implements IDisposable

@if (!_gameOverService.GameOver)
{
    <OpponentView Opponent="_gameService.Board.Opponent" />

    <div class="container-fluid">
        <div class="row">
            <div class="col-1">
                <TurnInfoDisplay Board="_gameService.Board" />
            </div>
            <div class="col-10">
                <CascadingValue Value="_gameService.Board" TValue="Board">
                    <CardField OnPlayerAttack="_gameService.Attack" OnPositionSwitch="_gameService.SwitchPosition" />
                </CascadingValue>
            </div>
        </div>
    </div>
    <CascadingValue Value="_gameService.Board" TValue="Board">
        <PlayerView PendingPlacement="_gameService.PendingPlacement" CardPlayed="_gameService.PlayCard" DisplayFieldOptions="_gameService.ChoosingFieldPosition"
                    OnPositionPicked="_gameService.PlayMonster" />
    </CascadingValue>
}
<GameOver Player="_gameService.Board.Player" />

@code {        
    protected override void OnInitialized()
    {
        _gameService.OnAction += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await _gameService.StartGame();
    }

    public void Dispose()
    {
        _gameService.OnAction -= StateHasChanged;
    }
}

<style>
    .opponent-display {
        margin-bottom: 1em;
    }

    .player-display {
        margin-top: 1em;
    }

    .spell-row, .monster-row {
        display: flex;
        justify-content: space-between;
    }
</style>